generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions           Session[]
  verificationTokens VerificationToken[]
  monitors           Monitor[]
  watchedMonitors    MonitorWatch[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  userId    String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model DataTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String?
  overpassQuery String
  category      String
  tags          String[]
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  monitors Monitor[]

  @@map("data_templates")
}

model Area {
  id          Int      @id
  name        String
  countryCode String?
  bounds      String?
  geojson     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  monitors Monitor[]

  @@map("areas")
}

model Monitor {
  id          String    @id @default(cuid())
  userId      String
  templateId  String
  areaId      Int
  cityName    String
  isActive    Boolean   @default(true)
  isPublic    Boolean   @default(false)
  lastChecked DateTime?
  dataCount   Int       @default(0)
  geojson     Json?
  bbox        Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  template DataTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)
  area     Area           @relation(fields: [areaId], references: [id], onDelete: Cascade)
  watchers MonitorWatch[]

  @@unique([userId, templateId, areaId])
  @@map("monitors")
}

model MonitorWatch {
  id        String   @id @default(cuid())
  userId    String
  monitorId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  monitor Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@unique([userId, monitorId])
  @@map("monitor_watches")
}
